import { Injectable, NotFoundException, ConflictException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service'; // Import PrismaService
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { User } from '@prisma/client'; // Import User model generated by Prisma
import * as bcrypt from 'bcrypt';

@Injectable()
export class UsersService {
  constructor(private prisma: PrismaService) {}

  async create(createUserDto: CreateUserDto): Promise<Omit<User, 'password'>> {
    const saltRounds = 10; // Or store in config/env
    const hashedPassword = await bcrypt.hash(createUserDto.password, saltRounds);

    try {
      const newUser = await this.prisma.user.create({
        data: {
          ...createUserDto,
          password: hashedPassword, // Store the hashed password
        },
      });
      // Don't return the password hash in the response
      const { password, ...result } = newUser;
      return result;
    } catch (error) {
       if (error.code === 'P2002') { // Prisma unique constraint violation (e.g., email already exists)
         throw new ConflictException(`Email ${createUserDto.email} already exists.`);
       }
       throw error; // Re-throw other errors
    }
  }

  async findAll(): Promise<Omit<User, 'password'>[]> { // Exclude password from findAll response
    const users = await this.prisma.user.findMany();
    return users.map(user => {
      const { password, ...result } = user;
      return result;;
    });
  }

  // Adding method for authentication
  async findByEmail(email: string): Promise<User | null> {
    return this.prisma.user.findUnique({
      where: { email },
    });
  }

  async findOne(id: number): Promise<Omit<User, 'password'>> { // Exclude password from findOne response
    try {
      const user = await this.prisma.user.findUniqueOrThrow({
        where: { id },
      });
      const { password, ...result } = user;
      return result;;
    } catch (error) {
      if (error.code === 'P2025') {
        throw new NotFoundException(`User with ID ${id} not found`);
      }
      throw error;
    }
  }

  async update(id: number, updateUserDto: UpdateUserDto): Promise<Omit<User, 'password'>> { // Exclude password
     // Ensure password cannot be updated via this DTO/endpoint
     if ('password' in updateUserDto) {
        // Or handle password update separately if needed
        throw new Error('Password updates not allowed through this endpoint.');
     }
     await this.findOne(id); // Check existence

    const updatedUser = await this.prisma.user.update({
      where: { id },
      data: updateUserDto,
    });
    const { password, ...result } = updatedUser;
    return result;;
  }

  // remove method 
  async remove(id: number): Promise<void> {
    await this.findOne(id); // Use the updated findOne which checks existence and throws
    await this.prisma.user.delete({
      where: { id },
    });
  }
}